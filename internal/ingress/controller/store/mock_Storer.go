// Code generated by mockery v1.0.0. DO NOT EDIT.

package store

import annotations "github.com/kubernetes-sigs/aws-alb-ingress-controller/internal/ingress/annotations"
import config "github.com/kubernetes-sigs/aws-alb-ingress-controller/internal/ingress/controller/config"
import mock "github.com/stretchr/testify/mock"
import v1 "k8s.io/api/core/v1"

// MockStorer is an autogenerated mock type for the Storer type
type MockStorer struct {
	mock.Mock
}

// GetClusterInstanceIDs provides a mock function with given fields:
func (_m *MockStorer) GetClusterInstanceIDs() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConfig provides a mock function with given fields:
func (_m *MockStorer) GetConfig() *config.Configuration {
	ret := _m.Called()

	var r0 *config.Configuration
	if rf, ok := ret.Get(0).(func() *config.Configuration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*config.Configuration)
		}
	}

	return r0
}

// GetIngressAnnotations provides a mock function with given fields: key
func (_m *MockStorer) GetIngressAnnotations(key string) (*annotations.Ingress, error) {
	ret := _m.Called(key)

	var r0 *annotations.Ingress
	if rf, ok := ret.Get(0).(func(string) *annotations.Ingress); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*annotations.Ingress)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetInstanceIDFromPodIP provides a mock function with given fields: _a0
func (_m *MockStorer) GetInstanceIDFromPodIP(_a0 string) (string, error) {
	ret := _m.Called(_a0)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNodeInstanceID provides a mock function with given fields: node
func (_m *MockStorer) GetNodeInstanceID(node *v1.Node) (string, error) {
	ret := _m.Called(node)

	var r0 string
	if rf, ok := ret.Get(0).(func(*v1.Node) string); ok {
		r0 = rf(node)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*v1.Node) error); ok {
		r1 = rf(node)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetService provides a mock function with given fields: key
func (_m *MockStorer) GetService(key string) (*v1.Service, error) {
	ret := _m.Called(key)

	var r0 *v1.Service
	if rf, ok := ret.Get(0).(func(string) *v1.Service); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceAnnotations provides a mock function with given fields: key, ingress
func (_m *MockStorer) GetServiceAnnotations(key string, ingress *annotations.Ingress) (*annotations.Service, error) {
	ret := _m.Called(key, ingress)

	var r0 *annotations.Service
	if rf, ok := ret.Get(0).(func(string, *annotations.Ingress) *annotations.Service); ok {
		r0 = rf(key, ingress)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*annotations.Service)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *annotations.Ingress) error); ok {
		r1 = rf(key, ingress)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServiceEndpoints provides a mock function with given fields: key
func (_m *MockStorer) GetServiceEndpoints(key string) (*v1.Endpoints, error) {
	ret := _m.Called(key)

	var r0 *v1.Endpoints
	if rf, ok := ret.Get(0).(func(string) *v1.Endpoints); ok {
		r0 = rf(key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*v1.Endpoints)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetServicePods provides a mock function with given fields: selector
func (_m *MockStorer) GetServicePods(selector map[string]string) []*v1.Pod {
	ret := _m.Called(selector)

	var r0 []*v1.Pod
	if rf, ok := ret.Get(0).(func(map[string]string) []*v1.Pod); ok {
		r0 = rf(selector)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Pod)
		}
	}

	return r0
}

// ListNodes provides a mock function with given fields:
func (_m *MockStorer) ListNodes() []*v1.Node {
	ret := _m.Called()

	var r0 []*v1.Node
	if rf, ok := ret.Get(0).(func() []*v1.Node); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*v1.Node)
		}
	}

	return r0
}

// ReadinessGateEnabled provides a mock function with given fields: key
func (_m *MockStorer) ReadinessGateEnabled(key string) bool {
	ret := _m.Called(key)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
